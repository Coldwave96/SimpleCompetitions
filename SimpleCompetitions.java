import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;

/**
 * The SimpleCompetitions class is the main application class containing main() method.
 * It will form the base of the other function classes which will be able to run within
 * this program. Users will be able to run other functions within this program of which
 * they choose by selecting a number specified by the output menu presented to them on
 * the command terminal.
 *
 * The program start by displaying a welcome message and then ask if the user wants to load
 * existing competitions from a file. Afterwards, user will need to choose one mode ('T' for
 * testing mode and 'N' for normal mode). And then the program will ask for names of the files
 * containing membership and bill information. Once the file names are given, the program will
 * load data from the files automatically.
 * If everything works, the program will display the main menu. User is able to create a
 * competition ('L' for LuckyNumbersCompetition and 'R' for RandomPickCompetition). After
 * creating a competition, user is supposed to add new entries for the current active competition
 * based on competition type. Then user could draw winners of current competition and view a
 * summary report of all competitions.
 * Every time user wants to exit, the program will ask whether he or she wants to save current
 * SimpleCompetitions into a binary file or not.
 *
 * Here are some constrains in this SimpleCompetitions program.
 * 1.Only customers who have valid membership accounts can enter a competition.
 * 2.The system does not support concurrent competitions.
 * 3.In a competition, one customer can have unlimited numbers of entries based on their paid bills.
 * 4.Customers get one entry for each $50 in a single bill.
 * 5.For one customer, only the first one entry with the highest prize will be awarded.
 *
 * @see DataProvider
 * @see Competition
 * @see LuckyNumbersCompetition
 * @see RandomPickCompetition
 * @see java.io.Serializable
 */
public class SimpleCompetitions implements Serializable {
    /*
    @param mode           mode of current SimpleCompetition
    @param competitionNum number of competitions created
    @param activeCpt      number of current active competitions (two values only)
    @param completedCpt   number of completed competitions
    @param competitions   ArrayList to store objects of competition class
     */
    private char mode;
    private int competitionNum = 0;
    private int activeCpt = 0;
    private int completedCpt = 0;

    ArrayList<Competition> competitions = new ArrayList<>();

    /**
     * This method is designed to generating new object of Competition class. Then creat
     * different competition based on @param type ('L' for LuckyNumbersCompetition and 'R' for
     * RandomPickCompetition). Every time after generating a new competition, add the new
     * competition into ArrayList competitions and @param competitionNum (number of competitions
     * created) plus one.
     *
     * @param type determine what type of competition should be created
     * @return an instance of LuckyNumbersCompetition or RandomPickCompetition
     */
    private Competition addNewCompetition(char type) {
        Competition newCompetition;
        if (type == 'L') {
            newCompetition = new LuckyNumbersCompetition();
        } else {
            newCompetition = new RandomPickCompetition();
        }
        this.competitions.add(newCompetition);
        this.competitionNum += 1;
        return newCompetition;
    }

    /**
     * This report method is designed to print the information of each competition generated by
     * current SimpleCompetitions instance and the statistics of the current SimpleCompetitions.
     * The information contains the competition's ID, name, status (active or not), type etc.
     *
     * @param sc current instance of SimpleCompetitions class
     */
    private void report(SimpleCompetitions sc) {
        System.out.println("----SUMMARY REPORT----");
        System.out.printf("+Number of completed competitions: %d\n", sc.completedCpt);
        System.out.printf("+Number of active competitions: %d\n", sc.activeCpt);

        for (Competition competition : sc.competitions) {
            System.out.println();
            System.out.printf("Competition ID: %d, name: %s,",
                    competition.getId(), competition.getName());
            if (competition.getWinnerEntry() == null) {
                System.out.println(" active: yes");
                System.out.printf("Number of entries: %d\n", competition.getEntryID());
            } else {
                System.out.println(" active: no");
                System.out.printf("Number of entries: %d\n", competition.getEntryID());
                System.out.printf("Number of winning entries: %d\n", competition.getWinnerNum());
                System.out.printf("Total awarded prizes: %d\n", competition.getTotalPrizes());
            }
        }
    }

    /**
     * This method is designed to asking if user wants to load existing competitions from a file.
     * If the competitions are successfully loaded, the user does not need to choose the running
     * mode (Testing or Normal) because the mode should be the same as the existing competitions.
     * Otherwise user should choose the running mode ('T' for testing mode and 'N' for normal mode).
     *
     * @param keyboard Scanner object to work with system input stream
     * @return SimpleCompetitions object from a file or a new SimpleCompetitions object
     * @exception Exception something goes wrong while loading existing competitions from the file.
     */
    public static SimpleCompetitions loadFile(Scanner keyboard) {
        SimpleCompetitions oldCompetition;
        while (true) {
            System.out.println("Load competitions from file? (Y/N)?");
            char option = keyboard.next().toUpperCase().charAt(0);

            if (option == 'Y') {
                System.out.println("File name:");
                String fileName = keyboard.next();
                keyboard.nextLine();

                try {
                    File file = new File(fileName);
                    if (file.exists()) {
                        ObjectInputStream in = new ObjectInputStream(new FileInputStream(fileName));
                        oldCompetition = (SimpleCompetitions) in.readObject();
                        break;
                    } else {
                        System.out.println("File not found! Please try again.");
                    }
                } catch (Exception e) {
                    System.out.println("Something wrong happened while loading existing " +
                            "competitions from the file.");
                    System.exit(0);
                }
            } else if (option == 'N') {
                oldCompetition = new SimpleCompetitions();

                //loop to set current SimpleCompetition mode
                while (true) {
                    System.out.println("Which mode would you like to run? " +
                            "(Type T for Testing, and N for Normal mode):");
                    char mode = keyboard.next().toUpperCase().charAt(0);

                    if (mode != 'T' && mode != 'N') {
                        System.out.println("Invalid mode! Please choose again.");
                    } else {
                        oldCompetition.mode = mode;
                        break;
                    }
                }
                break;
            } else {
                System.out.println("Unsupported option. Please try again!");
            }
        }
        return oldCompetition;
    }

    /**
     * Main program that uses the main SimpleCompetitions class
     *
     * @param args main program arguments
     */
    public static void main(String[] args) {
        System.out.println("----WELCOME TO SIMPLE COMPETITIONS APP----");
        Scanner keyboard = new Scanner(System.in);

        //create an object of the SimpleCompetitions class
        SimpleCompetitions sc = SimpleCompetitions.loadFile(keyboard);

        Competition newCompetition;

        //check SimpleCompetitions object sc already has competition objects or not
        if (sc.competitionNum != 0) {
            newCompetition = sc.competitions.get(sc.competitionNum - 1);
        } else {
            newCompetition = null;
        }

        //work with Member file and Bill file which user input
        System.out.println("Member file: ");
        String memberFile = keyboard.next();
        keyboard.nextLine();

        System.out.println("Bill file: ");
        String billFile = keyboard.next();
        keyboard.nextLine();

        //invoke a DataProvider object to work with Member file and Bill file
        DataProvider dataProvider = new DataProvider(memberFile, billFile);

        //loop of main function menu
        mainLoop:
        while (true) {
            System.out.println("Please select an option. Type 5 to exit.");
            System.out.println("1. Create a new competition");
            System.out.println("2. Add new entries");
            System.out.println("3. Draw winners");
            System.out.println("4. Get a summary report");
            System.out.println("5. Exit");

            String option = keyboard.next();
            keyboard.nextLine();

            switch (option) {
                case "1":
                    if (sc.activeCpt == 1) {
                        System.out.println("There is an active competition. "
                                + "SimpleCompetitions does not support concurrent competitions!");
                    } else {
                        //loop to creat different Competition type based on user input
                        while (true) {
                            System.out.println("Type of competition " +
                                    "(L: LuckyNumbers, R: RandomPick)?:");
                            char type = keyboard.next().toUpperCase().charAt(0);
                            keyboard.nextLine();
                            if (type != 'L' && type != 'R') {
                                System.out.println("Invalid competition type! " +
                                        "Please choose again.");
                            } else {
                                newCompetition = sc.addNewCompetition(type);
                                break;
                            }
                        }
                        newCompetition.handleCompetition(keyboard);
                        newCompetition.setId(sc.competitionNum);
                        newCompetition.printCompetitionInfo();
                        sc.activeCpt = 1; //now have an active competition
                    }
                    break;
                case "2":
                    //check whether sc already has an active competition or not
                    if (sc.activeCpt == 0) {
                        System.out.println("There is no active competition. Please create one!");
                    } else {
                        assert newCompetition != null;
                        newCompetition.handleEntry(keyboard, dataProvider, sc.mode);
                    }
                    break;
                case "3":
                    //check whether sc already has an active competition or not
                    if (sc.activeCpt == 0) {
                        System.out.println("There is no active competition. Please create one!");
                    } else {
                        assert newCompetition != null;
                        if (newCompetition.getEntryID() == 0) {
                            System.out.println("The current competition has no entries yet!");
                        } else {
                            newCompetition.drawWinners(dataProvider, sc.mode);
                            sc.activeCpt = 0; //current competition finished
                            sc.completedCpt += 1; //number of completed competition plus 1
                        }
                    }
                    break;
                case "4":
                    //check whether sc already has an competition or not
                    if (newCompetition == null) {
                        System.out.println("No competition has been created yet!");
                    } else {
                        sc.report(sc);
                    }
                    break;
                case "5":
                    //loop to ask if user wants to save competitions to file
                    while (true) {
                        System.out.println("Save competitions to file? (Y/N)?");
                        char saveOrNot = keyboard.next().toUpperCase().charAt(0);
                        keyboard.nextLine();
                        if (saveOrNot != 'Y' && saveOrNot != 'N') {
                            System.out.println("Invalid mode! Please choose again.");
                        } else {
                            if (saveOrNot == 'Y') {
                                System.out.println("File name:");
                                String fileName = keyboard.nextLine();
                                try {
                                    //save SimpleCompetitions object to a file
                                    FileOutputStream fileOut = new FileOutputStream(fileName);
                                    ObjectOutputStream out = new ObjectOutputStream(fileOut);
                                    out.writeObject(sc);
                                    out.close();
                                    fileOut.close();
                                    System.out.println("Competitions have been saved to file.");

                                    //update bill file
                                    dataProvider.updateBillFile();
                                    System.out.println("The bill file has also been " +
                                            "automatically updated.");
                                    break;
                                } catch (Exception e) {
                                    System.out.println("Something wrong happened!");
                                    System.exit(0);
                                }
                            } else {
                                break;
                            }
                        }
                    }
                    break mainLoop;
                default:
                    System.out.println("Unsupported option. Please try again!");
                    break;
            }
        }
        System.out.println("Goodbye!");
        keyboard.close();
    }
}
